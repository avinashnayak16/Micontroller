
heillo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000058d  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051a  00000000  00000000  00000721  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000219  00000000  00000000  00000c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e5  00000000  00000000  00000e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  0000116d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <t1_delay>:
	
}

void t1_delay()
{
	TCCR1A= 0x00;  // external clock falling edge
  6c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=0X0E;
  6e:	8e e0       	ldi	r24, 0x0E	; 14
  70:	8e bd       	out	0x2e, r24	; 46
	OCR1AH=00;  //temp =0
  72:	1b bc       	out	0x2b, r1	; 43
	OCR1AL=99;
  74:	83 e6       	ldi	r24, 0x63	; 99
  76:	8a bd       	out	0x2a, r24	; 42
	do
	{
		PORTA==TCNT1L;
  78:	8b b3       	in	r24, 0x1b	; 27
  7a:	8c b5       	in	r24, 0x2c	; 44
	} while ((TIFR & 0x10)==0);
  7c:	08 b6       	in	r0, 0x38	; 56
  7e:	04 fe       	sbrs	r0, 4
  80:	fb cf       	rjmp	.-10     	; 0x78 <t1_delay+0xc>
	TIFR = 0x10;
  82:	80 e1       	ldi	r24, 0x10	; 16
  84:	88 bf       	out	0x38, r24	; 56
  86:	08 95       	ret

00000088 <main>:
#include <avr/io.h>

void t1_delay();
int main(void)
{
	DDRB &= ~(1 << DDB1);  // Make PB1 (T1) input
  88:	87 b3       	in	r24, 0x17	; 23
  8a:	8d 7f       	andi	r24, 0xFD	; 253
  8c:	87 bb       	out	0x17, r24	; 23
	DDRC |= (1 << DDC0);    // PC0 as output
  8e:	84 b3       	in	r24, 0x14	; 20
  90:	81 60       	ori	r24, 0x01	; 1
  92:	84 bb       	out	0x14, r24	; 20
	
	DDRA = 0xFF;
  94:	8f ef       	ldi	r24, 0xFF	; 255
  96:	8a bb       	out	0x1a, r24	; 26

	while (1)
	{
		PORTC ^= 0x01;
  98:	95 b3       	in	r25, 0x15	; 21
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	89 27       	eor	r24, r25
  9e:	85 bb       	out	0x15, r24	; 21
		t1_delay();
  a0:	0e 94 36 00 	call	0x6c	; 0x6c <t1_delay>
  a4:	f9 cf       	rjmp	.-14     	; 0x98 <main+0x10>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
