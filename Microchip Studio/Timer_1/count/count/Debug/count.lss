
count.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000750  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c2  00000000  00000000  000008e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000222  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a7  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00001593  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  58:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  5c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  60:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  64:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  68:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  6c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  70:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf ef       	ldi	r28, 0xFF	; 255
  7a:	d4 e0       	ldi	r29, 0x04	; 4
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  84:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <main>:


int main(void)
{
    unsigned char x=0;
	DDRB=0x00;
  8c:	14 b8       	out	0x04, r1	; 4
	DDRC=DDRD=0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	8a b9       	out	0x0a, r24	; 10
  92:	87 b9       	out	0x07, r24	; 7
	TCCR0A= 0x06;  // external clock falling edge
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	84 bd       	out	0x24, r24	; 36
#include <avr/io.h>


int main(void)
{
    unsigned char x=0;
  98:	90 e0       	ldi	r25, 0x00	; 0
	DDRC=DDRD=0xFF;
	TCCR0A= 0x06;  // external clock falling edge
	
    while (1) 
    {
		PORTD = x;
  9a:	9b b9       	out	0x0b, r25	; 11
		do 
		{
			PORTC=TCNT0;		
  9c:	86 b5       	in	r24, 0x26	; 38
  9e:	88 b9       	out	0x08, r24	; 8
		} while ((TIFR0 & 0x01) == 0);
  a0:	a8 9b       	sbis	0x15, 0	; 21
  a2:	fc cf       	rjmp	.-8      	; 0x9c <main+0x10>
		TIFR0=0x01;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	85 bb       	out	0x15, r24	; 21
		x++;
  a8:	9f 5f       	subi	r25, 0xFF	; 255
    }
  aa:	f7 cf       	rjmp	.-18     	; 0x9a <main+0xe>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
