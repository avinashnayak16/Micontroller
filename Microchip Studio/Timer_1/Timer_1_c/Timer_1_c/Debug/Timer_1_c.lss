
Timer_1_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000588  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000508  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fb  00000000  00000000  00000c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002eb  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000112f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
}*/

#include "avr/io.h"
int a=0;
int main() {
	PORTB = 0X01;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	88 bb       	out	0x18, r24	; 24
	DDRA = 0X20;
  80:	80 e2       	ldi	r24, 0x20	; 32
  82:	8a bb       	out	0x1a, r24	; 26
	TCCR1A=00;
  84:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0X06;
  86:	86 e0       	ldi	r24, 0x06	; 6
  88:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0X0;
  8a:	1d bc       	out	0x2d, r1	; 45
  8c:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 199;
  8e:	87 ec       	ldi	r24, 0xC7	; 199
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	9b bd       	out	0x2b, r25	; 43
  94:	8a bd       	out	0x2a, r24	; 42
	

	while(1) {
		// Clear overflow flag before entering the loop
		TIFR |= (1 << TOV1);
  96:	88 b7       	in	r24, 0x38	; 56
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	88 bf       	out	0x38, r24	; 56
		
		do {
			PORTA ^= 0x20; // Display low byte on PORTC
  9c:	9b b3       	in	r25, 0x1b	; 27
  9e:	80 e2       	ldi	r24, 0x20	; 32
  a0:	89 27       	eor	r24, r25
  a2:	8b bb       	out	0x1b, r24	; 27
			
		} while ((TIFR & (1 << TOV1)) == 0); // Corrected condition using bitwise AND
  a4:	08 b6       	in	r0, 0x38	; 56
  a6:	02 fe       	sbrs	r0, 2
  a8:	f9 cf       	rjmp	.-14     	; 0x9c <main+0x20>

		// Clearing the overflow flag after exiting the loop
		TIFR = (1 << TOV1);
  aa:	84 e0       	ldi	r24, 0x04	; 4
  ac:	88 bf       	out	0x38, r24	; 56
	}
  ae:	f3 cf       	rjmp	.-26     	; 0x96 <main+0x1a>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
