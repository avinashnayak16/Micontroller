
GccApplication_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000058d  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000051a  00000000  00000000  00000711  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000203  00000000  00000000  00000c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f5  00000000  00000000  00000e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001159  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Timer0_Delay>:
		Timer0_Delay();	
	}
}
void Timer0_Delay()
{
	TCNT0=0x00;
  6c:	12 be       	out	0x32, r1	; 50
	OCR0=0XC7;
  6e:	87 ec       	ldi	r24, 0xC7	; 199
  70:	8c bf       	out	0x3c, r24	; 60
	TCCR0=0x09;  //normal mode , no Pre-scalar
  72:	89 e0       	ldi	r24, 0x09	; 9
  74:	83 bf       	out	0x33, r24	; 51
	while ((TIFR & 0x02)==0); //keep monitoring TOV0 bit 
  76:	08 b6       	in	r0, 0x38	; 56
  78:	01 fe       	sbrs	r0, 1
  7a:	fd cf       	rjmp	.-6      	; 0x76 <Timer0_Delay+0xa>
	TCCR0=0; // Stop th timer0 
  7c:	13 be       	out	0x33, r1	; 51
	TIFR=0x02; //clear TOV0 flag
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	88 bf       	out	0x38, r24	; 56
  82:	08 95       	ret

00000084 <main>:
#include <avr/io.h>

void Timer0_Delay();
int main(void)
{
    DDRB=0x20; //makes port-b 5 as output   port b =0010 0000
  84:	80 e2       	ldi	r24, 0x20	; 32
  86:	87 bb       	out	0x17, r24	; 23
	while (1)
	{
		PORTB = PORTB^(1<<PB5); //toggle pb7
  88:	98 b3       	in	r25, 0x18	; 24
  8a:	80 e2       	ldi	r24, 0x20	; 32
  8c:	89 27       	eor	r24, r25
  8e:	88 bb       	out	0x18, r24	; 24
		Timer0_Delay();	
  90:	0e 94 36 00 	call	0x6c	; 0x6c <Timer0_Delay>
  94:	f9 cf       	rjmp	.-14     	; 0x88 <main+0x4>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
